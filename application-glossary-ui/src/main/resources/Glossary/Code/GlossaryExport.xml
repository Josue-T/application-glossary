<?xml version='1.1' encoding='UTF-8'?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="Glossary.Code.GlossaryExport" locale="">
  <web>Glossary.Code</web>
  <name>GlossaryExport</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Glossary.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>GlossaryExport</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}&#xd;
  import org.apache.commons.lang3.StringUtils;&#xd;
&#xd;
  import org.xwiki.rendering.syntax.Syntax;&#xd;
  import org.xwiki.rendering.transformation.TransformationContext;&#xd;
&#xd;
  if(request.format.equals('csv')) {&#xd;
    def entries = services.query.hql("select obj.name from BaseObject obj where obj.className = 'Glossary.Code.GlossaryClass' and obj.name like :glossarySpace group by obj.name order by obj.name asc").bindValue('glossarySpace', "${request.glossary}.%".toString()).execute();&#xd;
&#xd;
    // Build a map of entries which will contain, for each language, the available translations of a Glossary entry&#xd;
    def transformationManager = services.component.getInstance(org.xwiki.rendering.transformation.TransformationManager);&#xd;
    def entriesMap = [:];&#xd;
    entries.each { entry ->&#xd;
      // Get every transaltions corresponding to this glossary entry&#xd;
      translations = services.query.hql("select doc.title, doc.language, doc.content, doc.syntaxId from XWikiDocument doc where doc.fullName = :entry").bindValue('entry', entry).execute();&#xd;
&#xd;
      translations.each { translation ->&#xd;
        def language = StringUtils.isBlank(translation[1]) ? 'default' : translation[1];&#xd;
&#xd;
        if (!entriesMap.containsKey(language)) {&#xd;
          entriesMap.put(language, [:]);&#xd;
        }&#xd;
&#xd;
        def xdom = services.rendering.parse(translation[2], translation[3]);&#xd;
        def transformationContext = new TransformationContext(xdom, Syntax.valueOf(translation[3]), true);&#xd;
        transformationManager.performTransformations(xdom, transformationContext);&#xd;
&#xd;
        entriesMap.get(language).put(entry, [&#xd;
          title: translation[0],&#xd;
          content: services.rendering.render(xdom, 'plain/1.0')&#xd;
        ]);&#xd;
      }&#xd;
    }&#xd;
&#xd;
    // We should now have registered every existing translation columns that exist in the Glossary&#xd;
    // Make sure that the language column 'default' is the first one. If no default column is in the entry map, then the one we added by default in the language columns initialization will be removed&#xd;
    def languageColumns = ['default']&#xd;
    languageColumns.addAll(entriesMap.keySet())&#xd;
    languageColumns.remove(languageColumns.lastIndexOf('default'))&#xd;
&#xd;
    def rows = []&#xd;
    // Create the first row of the export&#xd;
    def row = "\"${services.localization.render('glossary.export.id').replaceAll('"', '""')}\"";&#xd;
    languageColumns.each { languageColumn ->&#xd;
      def translatedLanguageColumn = xcontext.getLocale().forLanguageTag(languageColumn).getDisplayName(xcontext.getLocale());&#xd;
      if (translatedLanguageColumn.equals(languageColumn)) {&#xd;
        translatedLanguageColumn = services.localization.render("glossary.export.locale.${languageColumn}").replaceAll('"', '""');&#xd;
      }&#xd;
      def escapedTranslatedLanguageContent = services.localization.render('glossary.export.csv.content', [translatedLanguageColumn]).replaceAll('"', '""');&#xd;
      row = "${row};\"${translatedLanguageColumn}\";\"${escapedTranslatedLanguageContent}\"";&#xd;
    }&#xd;
    rows.add(row);&#xd;
&#xd;
    // Create the next content rows&#xd;
    entries.each { entry ->&#xd;
      row = "\"${entry.replaceAll('"', '""')}\"";&#xd;
      languageColumns.each { language ->&#xd;
        if (entriesMap.get(language).containsKey(entry)) {&#xd;
          def escapedEntryTitle = entriesMap.get(language).get(entry).get('title').replaceAll('"', '""');&#xd;
          def escapedEntryContent = entriesMap.get(language).get(entry).get('content').replaceAll('"', '""');&#xd;
          row = "${row};\"${escapedEntryTitle}\";\"${escapedEntryContent}\"";&#xd;
        } else {&#xd;
          row = "${row};;";&#xd;
        }&#xd;
      }&#xd;
      rows.add(row);&#xd;
    }&#xd;
&#xd;
    response.setContentType('application/csv');&#xd;
    xcontext.response.setHeader('Content-disposition', 'attachment; filename=export.csv');&#xd;
    response.getCharacterEncoding();&#xd;
    def bytes = StringUtils.join(rows, '\n').getBytes(response.getCharacterEncoding());&#xd;
    response.outputStream.write(bytes);&#xd;
    response.setContentLength(bytes.size());&#xd;
    response.flushBuffer();&#xd;
    xcontext.setFinished(true);&#xd;
  }&#xd;
{{/groovy}}</content>
</xwikidoc>
