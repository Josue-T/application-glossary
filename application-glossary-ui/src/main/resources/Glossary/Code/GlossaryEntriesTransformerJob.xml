<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="Glossary.Code.GlossaryEntriesTransformerJob" locale="">
  <web>Glossary.Code</web>
  <name>GlossaryEntriesTransformerJob</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Glossary Entries Transformer</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>Glossary.Code.GlossaryEntriesTransformerJob</name>
    <number>0</number>
    <className>XWiki.SchedulerJobClass</className>
    <guid>ccba10b0-742e-463f-a0df-0cef224435df</guid>
    <class>
      <name>XWiki.SchedulerJobClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <contextDatabase>
        <disabled>0</disabled>
        <name>contextDatabase</name>
        <number>9</number>
        <prettyName>Job execution context database</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextDatabase>
      <contextLang>
        <disabled>0</disabled>
        <name>contextLang</name>
        <number>8</number>
        <prettyName>Job execution context lang</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextLang>
      <contextUser>
        <disabled>0</disabled>
        <name>contextUser</name>
        <number>7</number>
        <prettyName>Job execution context user</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextUser>
      <cron>
        <disabled>0</disabled>
        <name>cron</name>
        <number>5</number>
        <prettyName>Cron Expression</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </cron>
      <jobClass>
        <disabled>0</disabled>
        <name>jobClass</name>
        <number>3</number>
        <prettyName>Job Class</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </jobClass>
      <jobDescription>
        <disabled>0</disabled>
        <name>jobDescription</name>
        <number>2</number>
        <prettyName>Job Description</prettyName>
        <rows>10</rows>
        <size>45</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </jobDescription>
      <jobName>
        <disabled>0</disabled>
        <name>jobName</name>
        <number>1</number>
        <prettyName>Job Name</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </jobName>
      <script>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>script</name>
        <number>6</number>
        <prettyName>Job Script</prettyName>
        <rows>10</rows>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </script>
      <status>
        <disabled>0</disabled>
        <name>status</name>
        <number>4</number>
        <prettyName>Status</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </status>
    </class>
    <property>
      <contextDatabase/>
    </property>
    <property>
      <contextLang>en</contextLang>
    </property>
    <property>
      <contextUser>XWiki.superadmin</contextUser>
    </property>
    <property>
      <cron>0 0 0 * * ?</cron>
    </property>
    <property>
      <jobClass>com.xpn.xwiki.plugin.scheduler.GroovyJob</jobClass>
    </property>
    <property>
      <jobDescription>: Scans all pages in a set of spaces and transforms each matched glossary entity into a call to the glossary reference macro.</jobDescription>
    </property>
    <property>
      <jobName>Glossary Entries Transformer</jobName>
    </property>
    <property>
      <script>/** This job inserts references to glossary entries in page contents. */
import org.xwiki.contrib.glossary.GlossaryConfiguration;
import org.xwiki.contrib.glossary.GlossaryEntriesTransformer;


def logger = services.logging.getLogger('Glossary.Code.GlossaryEntriesTransformerJob');
try {
  def glossaryConfiguration = services.component.getContextComponentManager().getInstance(GlossaryConfiguration.class, 'default');
  logger.debug('Transformation is activated: ' + glossaryConfiguration.isActivateTransformationJob());
  logger.debug('Target spaces: ' + glossaryConfiguration.getTransformationJobIncludeSpaces());
  logger.debug('Version increment: ' + glossaryConfiguration.isIncrementVersionOnTransformationJob());
  def start = System.currentTimeMillis();

  def spaceReferences = glossaryConfiguration.getTransformationJobIncludeSpaces();

  if (glossaryConfiguration.isActivateTransformationJob() &amp;&amp; spaceReferences.size() &gt; 0) {
    def transformer = services.component.getContextComponentManager().getInstance(GlossaryEntriesTransformer.class, 'default');
    def hql = 'select distinct doc.fullName from XWikiDocument as doc where ';
    spaceReferences.eachWithIndex { spaceReference, index -&gt;
      if (index &gt; 0)
        hql += " OR ";
      hql += "doc.fullName like :like${index}"
    }
    def query = services.query.hql(hql);
    spaceReferences.eachWithIndex { spaceReference, index -&gt;
       query.bindValue("like$index", services.model.serialize(spaceReference) + ".%")
    }
    def pages = query.execute();
    pages.each { pageName -&gt;
      def documentReference = services.model.resolveDocument(pageName);
      def page = xwiki.getDocument(documentReference).getDocument().clone();
      def locales = page.getTranslationLocales(xcontext);
      def defaultLocale = page.getDefaultLocale();
      if ("$defaultLocale" != '')
        locales.add(defaultLocale);
      logger.debug("Page: [{}] - Locales: [{}] ({})", documentReference, locales, locales.size());
      locales.each { locale -&gt;
        def translatedPage = page.getTranslatedDocument(locale, xcontext);
        def content = translatedPage.getContent();
        def syntax = translatedPage.getSyntax();
        def xdom = services.rendering.parse(content, syntax.toIdString());
        def transformed = transformer.transformGlossaryEntries(xdom, syntax, locale);
        if (transformed) {
          def transformedContent = services.rendering.render(xdom, syntax.toIdString());
          translatedPage.setContent(transformedContent);
          if (!glossaryConfiguration.isIncrementVersionOnTransformationJob()) {
            translatedPage.setContentDirty(false);
            translatedPage.setMetaDataDirty(false);
          }
          xwiki.getXWiki().saveDocument(translatedPage, services.localization.render('glossary.transformationJob.save.message'), true, xcontext);
        }
      }
    }
    def end = System.currentTimeMillis();
    def duration = end - start;
    logger.debug("Duration: {} ms", duration)
  }
} catch (Exception e) {
  logger.error('An error occurred while running the glossary transformation job: [{}]', e.getMessage(), e);
}
</script>
    </property>
    <property>
      <status>Normal</status>
    </property>
  </object>
</xwikidoc>
